class t extends Error{constructor(r){super(r),this.name="DatabaseError"}}const l="auth-form-db",i="users",y=1;async function h(){try{return await new Promise((a,r)=>{const e=indexedDB.open(l,y);e.onerror=()=>{var n;r(new t(`Failed to open database: ${((n=e.error)==null?void 0:n.message)||"Unknown error"}`))},e.onsuccess=()=>a(e.result),e.onupgradeneeded=n=>{try{const o=n.target.result;o.objectStoreNames.contains(i)||o.createObjectStore(i,{keyPath:"email"})}catch(o){r(new t(`Failed to upgrade database: ${o instanceof Error?o.message:"Unknown error"}`))}}})}catch(a){throw new t(`Database initialization failed: ${a instanceof Error?a.message:"Unknown error"}`)}}async function E(a,r,e){try{const n=await h(),o=await f(r);await new Promise((w,c)=>{try{const s=n.transaction(i,"readwrite"),g=s.objectStore(i),m={email:a,password:o,name:e},u=g.put(m);u.onerror=()=>{var d;c(new t(`Failed to add user: ${((d=u.error)==null?void 0:d.message)||"Unknown error"}`))},s.oncomplete=()=>w(),s.onerror=()=>{var d;c(new t(`Transaction failed: ${((d=s.error)==null?void 0:d.message)||"Unknown error"}`))},u.onsuccess=()=>w()}catch(s){c(new t(`Add user operation failed: ${s instanceof Error?s.message:"Unknown error"}`))}})}catch(n){throw new t(`Failed to add user: ${n instanceof Error?n.message:"Unknown error"}`)}}async function U(a){try{const r=await h();return await new Promise((e,n)=>{try{const o=r.transaction(i,"readonly"),c=o.objectStore(i).get(a);c.onerror=()=>{var s;n(new t(`Failed to get user: ${((s=c.error)==null?void 0:s.message)||"Unknown error"}`))},o.onerror=()=>{var s;n(new t(`Transaction failed: ${((s=o.error)==null?void 0:s.message)||"Unknown error"}`))},c.onsuccess=()=>e(c.result)}catch(o){n(new t(`Get user operation failed: ${o instanceof Error?o.message:"Unknown error"}`))}})}catch(r){throw new t(`Failed to get user: ${r instanceof Error?r.message:"Unknown error"}`)}}async function b(a,r){try{return await f(a)===r}catch(e){throw new t(`Password verification failed: ${e instanceof Error?e.message:"Unknown error"}`)}}async function f(a){try{const e=new TextEncoder().encode(a),n=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(n)).map(w=>w.toString(16).padStart(2,"0")).join("")}catch(r){throw new t(`Password hashing failed: ${r instanceof Error?r.message:"Unknown error"}`)}}export{E as a,U as g,b as v};
